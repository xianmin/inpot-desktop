name: Package
on:
    push:
        branches: [master]
        tags-ignore: [updater]
permissions: write-all

jobs:
    generate-changelog:
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags')
        outputs:
            changelog: ${{ steps.changelog.outputs.changelog }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Debug commit history
              run: |
                  echo "当前标签: $(git describe --tags)"
                  echo "提交历史:"
                  git log --pretty=format:"%h - %s (%cr)" -10
                  echo "所有标签:"
                  git tag -l

            - name: Get previous tag
              id: get_previous_tag
              run: |
                  # 获取所有标签并按版本排序
                  ALL_TAGS=$(git tag --sort=-v:refname)
                  # 当前标签
                  CURRENT_TAG=$(git describe --tags)
                  echo "当前标签: $CURRENT_TAG"

                  # 获取所有标签中位于当前标签之前的第一个标签
                  PREV_TAG=""
                  for tag in $ALL_TAGS; do
                    if [ "$tag" != "$CURRENT_TAG" ]; then
                      PREV_TAG=$tag
                      break
                    fi
                  done

                  # 如果没有找到前一个标签，使用初始提交
                  if [ -z "$PREV_TAG" ]; then
                    PREV_TAG=$(git rev-list --max-parents=0 HEAD)
                    echo "没有找到前一个标签，使用初始提交: $PREV_TAG"
                  else
                    echo "找到前一个标签: $PREV_TAG"
                  fi

                  echo "tag=$PREV_TAG" >> $GITHUB_OUTPUT

                  # 显示两个标签之间的提交
                  echo "当前标签与前一个标签之间的提交:"
                  git log --pretty=format:"%h - %s" $PREV_TAG..$CURRENT_TAG

            - name: Generate Changelog
              id: changelog
              uses: mikepenz/release-changelog-builder-action@v4
              with:
                  configuration: '.github/changelog-configuration.json'
                  outputFile: 'CHANGELOG.md'
                  ignorePreReleases: 'false'
                  fetchReleaseInformation: 'true'
                  failOnError: 'false'
                  commitMode: 'true'
                  fromTag: ${{ steps.get_previous_tag.outputs.tag }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Display Generated Changelog
              run: |
                  echo "生成的 CHANGELOG 内容:"
                  cat CHANGELOG.md

            - name: Upload Changelog
              uses: actions/upload-artifact@v4
              with:
                  name: CHANGELOG
                  path: CHANGELOG.md
                  if-no-files-found: error

    change-version:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.outputstep.outputs.VERSION }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install git
              run: |
                  sudo apt-get update
                  sudo apt-get install -y git
            - id: outputstep
              run: |
                  echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> "$GITHUB_OUTPUT"
            - name: Change Version for Windows
              run: |
                  sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\",/g" package.json

                  sed -i "s/\"version\":.*/\"version\": \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"/g" src-tauri/tauri.conf.json

                  sed -i "s/version = \"0.0.0\"/version = \"$(git describe --tags | sed 's/-[0-9]*-.*//g')\"/g" src-tauri/Cargo.toml

                  echo $(git describe --tags | sed 's/-[0-9]*-.*//g')

            - name: Upload Artifacts for Windows
              uses: actions/upload-artifact@v4
              with:
                  name: source
                  path: ./*
                  include-hidden-files: true
                  if-no-files-found: error

    build-extension:
        runs-on: ubuntu-latest
        needs: [generate-changelog]
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Download CHANGELOG
              if: startsWith(github.ref, 'refs/tags')
              uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Build Popclipext
              run: |
                  cd .scripts/popclip
                  bash ./build.sh
                  cd ../..
            - name: Build SnipDo
              run: |
                  cd .scripts/snipdo
                  bash ./build.sh
                  cd ../..
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: Pot.popclipextz
                  path: .scripts/popclip/Pot.popclipextz
                  if-no-files-found: error
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: pot.pbar
                  path: .scripts/snipdo/pot.pbar
                  if-no-files-found: error
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: .scripts/popclip/Pot.popclipextz
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: .scripts/snipdo/pot.pbar

    build-for-macos:
        needs: [change-version, generate-changelog]
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest]
                target: [aarch64-apple-darwin, x86_64-apple-darwin]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: source
            - uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Setup Nodejs
              uses: actions/setup-node@v4
              with:
                  node-version: 21
            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable
            - name: install dependencies
              run: |
                  rustup target add ${{ matrix.target }}
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10.4.0
            - name: Install Dependencies
              run: pnpm install
            - name: Code Format
              run: pnpm prettier --write .
            - name: Build and Package
              run: |
                  export TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
                  export TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
                  pnpm tauri build --target ${{ matrix.target }}
                  sudo chmod +x src-tauri/resources/*
                  chmod +x src-tauri/resources/*
            - name: Change File Name
              if: matrix.target == 'aarch64-apple-darwin'
              run: |
                  sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/inPot.app.tar.gz src-tauri/target/aarch64-apple-darwin/release/bundle/macos/inPot_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz
                  sudo mv src-tauri/target/aarch64-apple-darwin/release/bundle/macos/inPot.app.tar.gz.sig src-tauri/target/aarch64-apple-darwin/release/bundle/macos/inPot_${{needs.change-version.outputs.version}}_aarch64.app.tar.gz.sig
            - name: Change File Name
              if: matrix.target == 'x86_64-apple-darwin'
              run: |
                  sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/inPot.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/inPot_${{needs.change-version.outputs.version}}_x64.app.tar.gz
                  sudo mv src-tauri/target/x86_64-apple-darwin/release/bundle/macos/inPot.app.tar.gz.sig src-tauri/target/x86_64-apple-darwin/release/bundle/macos/inPot_${{needs.change-version.outputs.version}}_x64.app.tar.gz.sig
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: macos_${{ matrix.target }}_dmg
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
                  if-no-files-found: error
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: macos_${{ matrix.target }}_updater
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*
                  if-no-files-found: error
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app*

    build-for-windows:
        needs: [change-version, generate-changelog]
        strategy:
            fail-fast: false
            matrix:
                platform: [windows-latest]
                target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, aarch64-pc-windows-msvc]
                include:
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      toolchain: stable-x86_64-pc-windows-msvc
                    - os: windows-latest
                      target: i686-pc-windows-msvc
                      toolchain: stable-i686-pc-windows-msvc
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      toolchain: stable-aarch64-pc-windows-msvc
        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: source
            - uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Setup Nodejs
              uses: actions/setup-node@v4
              with:
                  node-version: 21
            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable
            - name: install dependencies
              run: |
                  rustup target add ${{ matrix.target }}
                  rustup toolchain install --force-non-host ${{ matrix.toolchain }}
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10.4.0
            - name: Install Dependencies
              run: pnpm install
            - name: Code Format
              run: pnpm prettier --write .
            - name: Build and Package
              run: |
                  $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
                  $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
                  pnpm tauri build -b nsis,updater --target ${{ matrix.target }}
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows_${{ matrix.target }}
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*
                  if-no-files-found: error
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*

    build-for-windows-fix-runtime:
        needs: [change-version, generate-changelog]
        strategy:
            fail-fast: false
            matrix:
                platform: [windows-latest]
                target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, aarch64-pc-windows-msvc]
                include:
                    - os: windows-latest
                      arch: x64
                      target: x86_64-pc-windows-msvc
                      toolchain: stable-x86_64-pc-windows-msvc
                    - os: windows-latest
                      arch: x86
                      target: i686-pc-windows-msvc
                      toolchain: stable-i686-pc-windows-msvc
                    - os: windows-latest
                      arch: arm64
                      target: aarch64-pc-windows-msvc
                      toolchain: stable-aarch64-pc-windows-msvc
        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: source
            - uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Setup Nodejs
              uses: actions/setup-node@v4
              with:
                  node-version: 21
            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable
            - name: install dependencies
              run: |
                  rustup target add ${{ matrix.target }}
                  rustup toolchain install --force-non-host ${{ matrix.toolchain }}
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10.4.0
            - name: Install Dependencies
              run: pnpm install
            - name: Code Format
              run: pnpm prettier --write .
            - name: Download WebView2 Runtime
              run: |
                  invoke-webrequest -uri https://github.com/westinyang/WebView2RuntimeArchive/releases/download/109.0.1518.78/Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -outfile Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab
                  Expand .\Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -F:* ./src-tauri
                  Remove-Item .\src-tauri\tauri.windows.conf.json
                  Rename-Item .\src-tauri\webview.${{ matrix.arch }}.json tauri.windows.conf.json
            - name: Build and Package
              run: |
                  $env:TAURI_PRIVATE_KEY="${{ secrets.TAURI_PRIVATE_KEY }}"
                  $env:TAURI_KEY_PASSWORD="${{ secrets.TAURI_KEY_PASSWORD }}"
                  pnpm tauri build -b nsis,updater --target ${{ matrix.target }}
                  Rename-Item .\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}-setup.exe inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}_fix_webview2_runtime-setup.exe
                  Rename-Item .\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}-setup.nsis.zip inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}_fix_webview2_runtime-setup.nsis.zip
                  Rename-Item .\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}-setup.nsis.zip.sig inPot_${{needs.change-version.outputs.version}}_${{ matrix.arch }}_fix_webview2_runtime-setup.nsis.zip.sig
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows_fix_webview_runtime_${{ matrix.target }}
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*
                  if-no-files-found: error
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*

    build-for-linux:
        needs: [change-version, generate-changelog]
        strategy:
            fail-fast: false
            matrix:
                platform: [ubuntu-latest]
                target:
                    [
                        x86_64-unknown-linux-gnu,
                        i686-unknown-linux-gnu,
                        aarch64-unknown-linux-gnu,
                        armv7-unknown-linux-gnueabihf,
                    ]
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      toolchain: stable-x86_64-unknown-linux-gnu
                    - os: ubuntu-latest
                      target: i686-unknown-linux-gnu
                      toolchain: stable-i686-unknown-linux-gnu
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      toolchain: stable-aarch64-unknown-linux-gnu
                    - os: ubuntu-latest
                      target: armv7-unknown-linux-gnueabihf
                      toolchain: stable-armv7-unknown-linux-gnueabihf
        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: source
            - uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Build for Linux
              uses: ./.github/actions/build-for-linux
              env:
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  target: ${{ matrix.target }}
                  toolchain: ${{ matrix.toolchain }}
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: linux_${{ matrix.target }}_deb
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
                  if-no-files-found: error
            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: linux_${{ matrix.target }}_rpm
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm
                  if-no-files-found: error
            - name: Upload Artifacts
              if: matrix.target == 'x86_64-unknown-linux-gnu'
              uses: actions/upload-artifact@v4
              with:
                  name: linux_${{ matrix.target }}_appimage
                  path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
                  if-no-files-found: error
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags') && matrix.target == 'x86_64-unknown-linux-gnu'
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage*
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            - name: Upload Release
              if: startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

    trigger-docs-update:
        needs: [build-for-macos, build-for-windows, build-for-linux]
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags')
        steps:
            - name: Trigger update
              run: |
                  curl -X POST https://api.github.com/repos/xianmin/inpot-desktop/dispatches \
                    -H "Accept: application/vnd.github.everest-preview+json" \
                    -H "Authorization: token ${{ secrets.TOKEN }}" \
                    -d '{"event_type": "plugins-updated"}'

    release-update:
        needs: [build-for-macos, build-for-windows, build-for-linux, build-for-windows-fix-runtime, generate-changelog]
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags')
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Install git
              run: |
                  sudo apt-get update
                  sudo apt-get install -y git curl
            - name: Get Tag Name
              run: |
                  echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> $GITHUB_ENV
                  echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')"
            - name: Download CHANGELOG
              uses: actions/download-artifact@v4
              with:
                  name: CHANGELOG
                  path: ./
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 10.4.0
            - name: pnpm install
              run: pnpm install
            - name: Release updater file
              run: |
                  pnpm run updater
                  pnpm run updater:fixRuntime
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Upload Release
              uses: softprops/action-gh-release@v1
              with:
                  body_path: CHANGELOG.md
                  tag_name: updater
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: |
                      update.json
                      update-fix-runtime.json

    # homebrew:
    #     name: Update Homebrew cask
    #     needs: build-for-macos
    #     runs-on: macos-latest
    #     if: startsWith(github.ref, 'refs/tags')
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v4
    #           with:
    #               fetch-depth: 0
    #         - name: Get Tag Name
    #           run: |
    #               echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> $GITHUB_ENV
    #               echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')"
    #         - name: Set up Homebrew
    #           uses: Homebrew/actions/setup-homebrew@master
    #         - name: Set up Git
    #           run: |
    #               # sudo apt-get install git -y
    #               git config --global user.email support@pot-app.com
    #               git config --global user.name pot-app
    #         - name: Update Homebrew cask
    #           env:
    #               HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.TOKEN }}
    #           run: |
    #               brew tap pot-app/homebrew-tap
    #               brew update
    #               brew bump-cask-pr pot --version ${{ env.VERSION }} --no-browse

    # winget:
    #     name: Update WinGet Package
    #     needs: build-for-windows
    #     runs-on: ubuntu-latest
    #     if: startsWith(github.ref, 'refs/tags')
    #     steps:
    #         - name: Checkout repository
    #           uses: actions/checkout@v4
    #           with:
    #               fetch-depth: 0
    #         - name: Install git
    #           run: |
    #               sudo apt-get update
    #               sudo apt-get install -y git
    #         - name: Get Tag Name
    #           run: |
    #               echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')" >> $GITHUB_ENV
    #               echo "VERSION=$(git describe --tags | sed 's/-[0-9]*-.*//g')"
    #         - name: Upload WinGet
    #           if: startsWith(github.ref, 'refs/tags')
    #           uses: vedantmgoyal2009/winget-releaser@v2
    #           with:
    #               identifier: xianmin.inpot
    #               version: ${{env.VERSION}}
    #               installers-regex: '\.exe$'
    #               token: ${{ secrets.TOKEN }}
    #               fork-user: xianmin
    #           continue-on-error: true
